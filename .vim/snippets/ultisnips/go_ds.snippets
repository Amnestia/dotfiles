snippet pq "Priority Queue"
type Item struct {
	Value    int
	Priority int
}

type PriorityQueue []Item

func (pq PriorityQueue) Len() int { return len(pq) }
func (pq PriorityQueue) Less(i, j int) bool { return pq[i].Priority < pq[j].Priority }
func (pq PriorityQueue) Swap(i, j int) { pq[i], pq[j] = pq[j], pq[i] }
func (pq *PriorityQueue) Push(x any) { *pq = append(*pq, x.(Item)) }
func (pq *PriorityQueue) Pop() any {
	old := *pq
	n := len(*pq)
	i := old[n-1]
	*pq = old[:n-1]
	return i
}
endsnippet

snippet disjointset "Disjoint Set"
func makeSet(n int64) map[int64]int64 {
	ret := map[int64]int64{}
	for i := int64(0); i < n; i++ {
		ret[i] = i
	}
	return ret
}

func findRoot(curr int64, root map[int64]int64) int64 {
	for root[curr] != curr {
		root[curr] = root[root[curr]]
		curr = root[curr]
	}
	return curr
}

func unite(x, y int64, root map[int64]int64) bool {
	rootX := findRoot(x, root)
	rootY := findRoot(y, root)
	if rootX == rootY {
		return false
	}
	root[rootX] = rootY
	return true
}
endsnippet
